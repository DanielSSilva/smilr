#
# Azure Pipelines
# - Build both Smilr Node.js images and push to Azure Container Registry
# - Deploy to Azure Container Instances across multiple stages
# Ben C, 2019
#
name: $(Date:yyyy-MM-dd)$(Rev:.rr)

trigger:
  branches:
    include: 
    - master
  paths:
    include:
      - node/*
      - vue/*
      - azure/pipelines/*

# NOTE! This variable group must be pre-created and populated
# - Expected variables: acr-connection
variables:
  - group: shared-variables

stages:
#
# Build stage
#
- stage: build
  displayName: 'Build containers'

  jobs:
  - job: buildJob
    displayName: 'Build & push to ACR'

    condition: and(succeeded(), ne(variables['skip-build'], 'true'))

    pool:
      vmImage: Ubuntu-16.04

    steps:
    - task: Docker@2
      displayName: 'Build data API'
      inputs:
        command: build
        containerRegistry: $(acr-connection)
        Dockerfile: node/data-api/Dockerfile
        buildContext: .
        repository: smilr/data-api
        arguments: --build-arg build_info="Pipeline CI build $(Build.BuildNumber) $(Build.Reason) [Linux container]"
        tags: |
          latest
          $(Build.BuildNumber)

    - task: Docker@2
      displayName: 'Build frontend'
      inputs:
        command: build
        containerRegistry: $(acr-connection)
        Dockerfile: node/frontend/Dockerfile
        buildContext: .
        repository: smilr/frontend
        arguments: --build-arg build_info="Pipeline CI build $(Build.BuildNumber) $(Build.Reason) [Linux container]"
        tags: |
          latest
          $(Build.BuildNumber)  

    - task: Docker@2
      displayName: 'Push data API'
      inputs:
        command: push
        containerRegistry: $(acr-connection)
        repository: smilr/data-api
        tags: |
          latest
          $(Build.BuildNumber) 

    - task: Docker@2
      displayName: 'Push frontend'
      inputs:
        command: push
        containerRegistry: $(acr-connection)
        repository: smilr/frontend
        tags: |
          latest
          $(Build.BuildNumber)             
#
# Deploy stage 1 - test environment
#
- stage: deployToTest
  displayName: Deploy to Test
  
  variables:
    location: westeurope
    dns-prefix: smilr-$(Build.BuildId)-test

  jobs:
  - template: templates/deploy-aci-arm.yml
    parameters:
      envName: ACI-Test

  - template: templates/run-postman-tests.yml
    parameters:
      dependsOn: deployWithACI
      apiHost: $(dns-prefix)-api.$(location).azurecontainer.io
      frontHost: $(dns-prefix)-frontend.$(location).azurecontainer.io

#
# Deploy stage 2 - staging environment
#
- stage: deployToStaging
  displayName: Deploy to Staging
  
  variables:
    location: westeurope
    dns-prefix: smilr-$(Build.BuildId)-staging

  jobs:
  - template: templates/deploy-aci-arm.yml
    parameters:
      envName: ACI-Staging

  - template: templates/run-postman-tests.yml
    parameters:
      dependsOn: deployWithACI
      apiHost: $(dns-prefix)-api.$(location).azurecontainer.io
      frontHost: $(dns-prefix)-frontend.$(location).azurecontainer.io

#
# Deploy stage 3 - prod environment
#
- stage: deployToProduction
  displayName: Deploy to Production
  
  variables:
    location: westeurope
    dns-prefix: smilr-prod

  jobs:
  - template: templates/deploy-aci-arm.yml
    parameters:
      envName: ACI-Production

  - template: templates/run-postman-tests.yml
    parameters:
      dependsOn: deployWithACI
      apiHost: $(dns-prefix)-api.$(location).azurecontainer.io
      frontHost: $(dns-prefix)-frontend.$(location).azurecontainer.io
